import os
import warnings
warnings.filterwarnings('ignore')
os.environ['STREAMLIT_SERVER_FILE_WATCHER_TYPE'] = 'none'
import streamlit as st
import torch
import torch.nn as nn
import timm
import numpy as np
from PIL import Image, ExifTags
import cv2
from torchvision import transforms
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import glob
import requests 
from datetime import datetime, timedelta 
from geopy.geocoders import Nominatim
import folium
from streamlit_folium import st_folium

# --- Weather API Configuration ---
WEATHER_API_KEY = "94f7680251424030b49141625250307" 
WEATHER_API_URL = "http://api.weatherapi.com/v1/history.json"
WEATHER_CURRENT_API_URL = "http://api.weatherapi.com/v1/current.json"  

st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á",
    page_icon="üåø",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_css():
    st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e7eb 100%);
        padding: 20px;
    }
    
    .stTitle {
        color: #1a472a !important;
        text-align: center;
        font-family: 'Kanit', sans-serif;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }

    .stMarkdown {
        font-family: 'Kanit', sans-serif;
    }
    
    .disease-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        border-left: 5px solid #4a7c4a;
        margin: 15px 0;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .disease-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 20px rgba(0,0,0,0.15);
    }
    
    .healthy-card {
        background: linear-gradient(135deg, #e6f5e6 0%, #d4ebd4 100%);
        border-left: 5px solid #28a745;
    }
    
    .disease-severe {
        background: linear-gradient(135deg, #fff5f5 0%, #ffe6e6 100%);
        border-left: 5px solid #dc3545;
    }
    
    .confidence-bar {
        background: #f8f9fa;
        border-radius: 10px;
        overflow: hidden;
        height: 24px;
        margin: 10px 0;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .confidence-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745 0%, #ffc107 50%, #dc3545 100%);
        transition: width 0.5s ease;
        border-radius: 10px;
    }
    
    .farmer-emoji {
        font-size: 3em;
        text-align: center;
        margin: 30px 0;
        animation: float 3s ease-in-out infinite;
    }
    
    @keyframes float {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0px); }
    }

    .stButton > button {
        background-color: #1a472a;
        color: white;
        border-radius: 10px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }

    .stButton > button:hover {
        background-color: #2c6e44;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .stTextInput > div > div > input {
        border-radius: 10px;
        border: 2px solid #e0e0e0;
        padding: 0.5rem;
        transition: all 0.3s ease;
    }

    .stTextInput > div > div > input:focus {
        border-color: #1a472a;
        box-shadow: 0 0 0 2px rgba(26, 71, 42, 0.2);
    }

    .info-box {
        background: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin: 10px 0;
    }

    .metric-container {
        background: white;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        text-align: center;
        transition: transform 0.2s ease;
    }

    .metric-container:hover {
        transform: translateY(-3px);
    }

    .metric-label {
        font-size: 0.9em;
        color: #666;
        margin-bottom: 5px;
    }

    .metric-value {
        font-size: 1.4em;
        font-weight: bold;
        color: #1a472a;
    }

    .weather-icon {
        font-size: 2em;
        margin-bottom: 10px;
    }

    .status-message {
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    }

    .status-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-warning {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
    }

    .status-error {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .map-container {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .stRadio > div {
        background-color: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .stRadio > div > div > label {
        background-color: #f8f9fa;
        padding: 10px 15px;
        border-radius: 8px;
        margin: 5px;
        transition: all 0.3s ease;
    }

    .stRadio > div > div > label:hover {
        background-color: #e9ecef;
    }

    div[data-testid="stFileUploader"] {
        background-color: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    div[data-testid="stImage"] {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    </style>
    
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600&display=swap" rel="stylesheet">
    """, unsafe_allow_html=True)

DISEASE_INFO = {
    'CBB': {
        'name': 'CBB (Cassava Bacterial Blight)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏â‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏¢',
        'symptoms': ' ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏â‡πà‡∏≥‡∏ô‡πâ‡∏≥ ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ ‡πÉ‡∏ö‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß ‡∏¢‡∏≤‡∏á‡πÑ‡∏´‡∏•‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏≠‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡πâ‡∏á‡∏ï‡∏≤‡∏¢‡∏•‡∏á‡∏°‡∏≤ ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤',
        'treatment': '‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡∏ä‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô, ‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≠‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠',
        'severity': '‡∏™‡∏π‡∏á',
        'emoji': 'üü°',
        'example_images': sorted(glob.glob('streamlit/assets/img/CBB/*.jpg') + glob.glob('streamlit/assets/img/CBB/*.png'))
    },
    'CBSD': {
        'name': 'CBSD (Cassava Brown Streak Disease)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ß‡∏£‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ö‡∏ô‡πÉ‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô',
        'symptoms': '‡πÉ‡∏ö‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏â‡∏≤ ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ö‡∏ô‡∏•‡∏≥‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏Ç‡πá‡∏á',
        'treatment': '‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä, ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß',
        'severity': '‡∏™‡∏π‡∏á',
        'emoji': 'üçÇ',
        'example_images': sorted(glob.glob('streamlit/assets/img/CBSD/*.jpg') + glob.glob('streamlit/assets/img/CBSD/*.png'))
    },
    'CGM': {
        'name': 'CGM (Cassava Green Mottle)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ß‡∏£‡∏±‡∏™‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ö‡∏ô‡πÉ‡∏ö‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏ô‡∏ß‡∏≤‡∏î‡πÑ‡∏ß‡πâ',
        'symptoms': '‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏£‡∏∞‡πÅ‡∏Å‡∏£‡πá‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ô‡πâ‡∏≠‡∏¢ ‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß',
        'treatment': '‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä, ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß',
        'severity': '‡∏ï‡πà‡∏≥',
        'emoji': 'ü¶†',
        'example_images': sorted(glob.glob('streamlit/assets/img/CGM/*.jpg') + glob.glob('streamlit/assets/img/CGM/*.png'))
    },
    'CMD': {
        'name': 'CMD (Cassava Mosaic Disease)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡πÉ‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á ‡∏´‡∏î‡∏•‡∏î‡∏£‡∏π‡∏õ',
        'symptoms': '‡πÉ‡∏ö‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ä‡πâ‡∏≤ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏à‡∏∞‡∏ï‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡πÇ‡∏£‡∏Ñ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á',
        'treatment': '‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä, ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß',
        'severity': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        'emoji': 'üü¢',
        'example_images': sorted(glob.glob('streamlit/assets/img/CMD/*.jpg') + glob.glob('streamlit/assets/img/CMD/*.png'))
    },
    'HEALTHY': {
        'name': 'Healthy',
        'thai_name': '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ',
        'description': '‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ',
        'symptoms': '‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏™‡∏î ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ',
        'treatment': '‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ',
        'severity': '‡πÑ‡∏°‡πà‡∏°‡∏µ',
        'emoji': '‚úÖ',
        'example_images': sorted(glob.glob('streamlit/assets/img/HEALTY/*.jpg') + glob.glob('streamlit/assets/img/HEALTY/*.png'))
    }
}

class SEBlock(nn.Module):
    def __init__(self, channels, reduction=16):
        super(SEBlock, self).__init__()
        self.fc = nn.Sequential(
            nn.Linear(channels, channels // reduction),
            nn.ReLU(),
            nn.Linear(channels // reduction, channels),
            nn.Sigmoid()
        )
    
    def forward(self, x):
        b, seq_len, c = x.size()
        y = x.mean(dim=1)
        y = self.fc(y)
        return x * y.unsqueeze(1).expand_as(x)

class CrossStageAttention(nn.Module):
    def __init__(self, channels, num_heads=4):
        super().__init__()
        self.num_heads = num_heads
        self.qkv = nn.Linear(channels, channels * 3)
        self.proj = nn.Linear(channels, 64)
        self.scale = (channels // num_heads) ** -0.5
    
    def forward(self, x_list):
        B = x_list[0].shape[0]
        x = torch.cat(x_list, dim=1)
        
        qkv = self.qkv(x).chunk(3, dim=-1)
        q, k, v = map(lambda t: t.reshape(B, -1, self.num_heads, t.shape[-1]//self.num_heads).permute(0, 2, 1, 3), qkv)
        
        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        x = (attn @ v).transpose(1, 2).reshape(B, -1, x.shape[-1])
        
        return self.proj(x.mean(dim=1))

class DynamicFeatureReducer(nn.Module):
    def __init__(self, in_channels):
        super().__init__()
        self.proj = nn.Linear(in_channels, 128)
        self.se = SEBlock(128)
        self.norm = nn.LayerNorm(128)
    
    def forward(self, x):
        x = self.proj(x)
        x = self.norm(x)
        x = self.se(x)
        return x

class vit_base_patch32_model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        
        # Using a more widely available model
        self.backbone = timm.create_model(
            'vit_base_patch32_clip_448.laion2b_ft_in12k_in1k', 
            pretrained=True,
            num_classes=0
        )
        
        if hasattr(self.backbone, 'set_grad_checkpointing'):
            self.backbone.set_grad_checkpointing(True)
        
        self.hidden_dim = 768
        self.feature_layers = [9, 11]
        
        self.reducers = nn.ModuleList([
            DynamicFeatureReducer(self.hidden_dim) for _ in self.feature_layers
        ])
        
        self.cross_attention = CrossStageAttention(channels=128)
        
        self.classifier = nn.Sequential(
            nn.Linear(64, 128),
            nn.GELU(),
            nn.Dropout(0.1),
            nn.Linear(128, num_classes)
        )
        
        self.temperature = nn.Parameter(torch.ones(1))
    
    def forward_features(self, x):
        x = self.backbone.patch_embed(x)
        x = self.backbone._pos_embed(x)
        x = self.backbone.patch_drop(x)
        x = self.backbone.norm_pre(x)
        
        intermediate_features = {}
        
        for i, block in enumerate(self.backbone.blocks):
            x = block(x)
            if i in self.feature_layers:
                intermediate_features[i] = x
        
        return intermediate_features
    
    def forward(self, x, return_features=False):
        intermediate_features = self.forward_features(x)
        
        reduced_features = []
        for i, layer_idx in enumerate(self.feature_layers):
            feat = intermediate_features[layer_idx]
            reduced = self.reducers[i](feat)
            reduced_features.append(reduced)
        
        x = self.cross_attention(reduced_features)
        
        features = self.classifier[:3](x)
        logits = self.classifier[3:](features)
        logits = logits / self.temperature
        
        if return_features:
            return features
        return logits

def fix_image_orientation(image):
    """Fix image orientation based on EXIF data"""
    try:
        # Get EXIF data
        for orientation in ExifTags.TAGS.keys():
            if ExifTags.TAGS[orientation] == 'Orientation':
                break
        
        exif = image._getexif()
        if exif is not None:
            orientation_value = exif.get(orientation)
            
            # Rotate image based on EXIF orientation
            if orientation_value == 2:
                image = image.transpose(Image.FLIP_LEFT_RIGHT)
            elif orientation_value == 3:
                image = image.rotate(180)
            elif orientation_value == 4:
                image = image.rotate(180).transpose(Image.FLIP_LEFT_RIGHT)
            elif orientation_value == 5:
                image = image.rotate(-90).transpose(Image.FLIP_LEFT_RIGHT)
            elif orientation_value == 6:
                image = image.rotate(-90)
            elif orientation_value == 7:
                image = image.rotate(90).transpose(Image.FLIP_LEFT_RIGHT)
            elif orientation_value == 8:
                image = image.rotate(90)
    except (AttributeError, KeyError, IndexError):
        # Cases when Exif data is not available/valid
        pass
    return image

def validate_cassava_image(image, model):
    try:
        # Fix image orientation first
        image = fix_image_orientation(image)
        image = image.resize((448, 448))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        img_array = np.array(image)
        gray_image = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        mean_intensity = np.mean(gray_image)
        
        if mean_intensity < 50 or mean_intensity > 200:
            return False, None, None
        
        entropy = -np.sum((gray_image / 255.0) * np.log2(gray_image / 255.0 + 1e-10))
        
        if entropy < 3.0:  
            return False, None, None
        
        return True, None, entropy
    
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {str(e)}")
        return False, None, None

@st.cache_resource
def load_model():
    try:
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')  
        model = vit_base_patch32_model(num_classes=5)
        model_path = "streamlit/assets/model/best_model.pth"
        
        if not os.path.exists(model_path):
            st.error(f"Model file not found at {model_path}")
            return None, None
            
        if torch.cuda.is_available():
            checkpoint = torch.load(model_path)
        else:
            checkpoint = torch.load(model_path, map_location='cpu')

        checkpoint = remove_module_prefix(checkpoint)

        try:
            model.load_state_dict(checkpoint)
        except Exception as e:
            st.error(f"Error loading state dict: {str(e)}")
            # Try to print the expected and actual keys
            model_state_dict = model.state_dict()
            st.write("Expected keys:", list(model_state_dict.keys())[:5])
            st.write("Checkpoint keys:", list(checkpoint.keys())[:5])
            return None, None

        model.to(device)
        model.eval()
        return model, device
    except FileNotFoundError:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        return None, None
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}")
        st.write(f"Error details: {type(e).__name__}: {str(e)}")
        import traceback
        st.write("Traceback:", traceback.format_exc())
        return None, None

def preprocess_image(image):
    """Preprocess image for model prediction"""
    # Fix image orientation first
    image = fix_image_orientation(image)
    
    transform = transforms.Compose([
        transforms.Resize((448, 448)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    return transform(image).unsqueeze(0)

def predict_disease(model, image, device):
    try:
        image_tensor = preprocess_image(image).to(device)
        
        with torch.no_grad():
            outputs = model(image_tensor)
            probabilities = torch.nn.functional.softmax(outputs, dim=1)
            predictions = probabilities.cpu().numpy()[0]
        
        class_names = ['CBB', 'CBSD', 'CGM', 'CMD', 'HEALTHY']
        results = dict(zip(class_names, predictions))
        
        return results
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {str(e)}")
        return None

def create_prediction_chart(predictions):
    df = pd.DataFrame(list(predictions.items()), columns=['Disease', 'Probability'])
    df['Probability'] = df['Probability'] * 100
    df = df.sort_values('Probability', ascending=True)
    
    fig = px.bar(df, 
                 x='Probability', 
                 y='Disease',
                 orientation='h',
                 title='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ (%)',
                 color='Probability',
                 color_continuous_scale='RdYlGn_r')
    
    fig.update_layout(
        xaxis_title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (%)",
        yaxis_title="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏£‡∏Ñ",
        font=dict(family="Tahoma", size=12),
        height=400
    )
    
    return fig

def remove_module_prefix(state_dict):
    from collections import OrderedDict
    new_state_dict = OrderedDict()
    for k, v in state_dict.items():
        name = k
        if k.startswith('module.'):
            name = k[7:]  
        new_state_dict[name] = v
    return new_state_dict

def get_user_location():
    try:
        response = requests.get('http://ip-api.com/json/')
        if response.status_code == 200:
            data = response.json()
            if data['status'] == 'success':
                return data['lat'], data['lon'], data['city'] + ', ' + data['country']
    except:
        pass
    return 13.7367, 100.5532, "Bangkok, Thailand"

def reverse_geocode(lat, lon):
    try:
        geolocator = Nominatim(user_agent="cassava_disease_analyzer")
        location = geolocator.reverse(f"{lat}, {lon}", language='th')
        if location:
            return location.address
        else:
            return f"‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {lat:.4f}, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {lon:.4f}"
    except:
        return f"‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {lat:.4f}, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {lon:.4f}"

def location_input_section():
    st.markdown("## üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û")
    
    location_method = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:",
        ["üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", "‚å®Ô∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏≠‡∏á", "üìç ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"]
    )
    
    if 'selected_lat' not in st.session_state:
        st.session_state.selected_lat = 16.4883
    if 'selected_lon' not in st.session_state:
        st.session_state.selected_lon = 102.8340
    if 'location_name' not in st.session_state:
        st.session_state.location_name = "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢"
    
    latitude = st.session_state.selected_lat
    longitude = st.session_state.selected_lon
    
    if location_method == "üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà":
        st.write("üëÜ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")
        
        m = folium.Map(location=[latitude, longitude], zoom_start=10, tiles='OpenStreetMap')
        folium.Marker(
            [latitude, longitude],
            popup=f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å<br>‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {latitude:.4f}<br>‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {longitude:.4f}",
            tooltip="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
            icon=folium.Icon(color='red', icon='camera')
        ).add_to(m)
        
        map_data = st_folium(m, width=700, height=500, returned_objects=["last_clicked"])
        
        if map_data['last_clicked'] is not None:
            clicked_lat = map_data['last_clicked']['lat']
            clicked_lon = map_data['last_clicked']['lng']
            
            st.session_state.selected_lat = clicked_lat
            st.session_state.selected_lon = clicked_lon
            
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà..."):
                location_name = reverse_geocode(clicked_lat, clicked_lon)
                st.session_state.location_name = location_name
            
            st.rerun()
        
        st.success(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {st.session_state.location_name}")
        st.info(f"‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {latitude:.6f}, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {longitude:.6f}")
        
    elif location_method == "‚å®Ô∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏≠‡∏á":
        col1, col2 = st.columns(2)
        with col1:
            new_lat = st.number_input("‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)", 
                                    value=float(latitude), 
                                    min_value=-90.0, 
                                    max_value=90.0, 
                                    step=0.000001,
                                    format="%.6f",
                                    help="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 16.488300 (‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô)")
        with col2:
            new_lon = st.number_input("‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)", 
                                    value=float(longitude), 
                                    min_value=-180.0, 
                                    max_value=180.0, 
                                    step=0.000001,
                                    format="%.6f",
                                    help="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 102.834000 (‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô)")
        
        if new_lat != latitude or new_lon != longitude:
            st.session_state.selected_lat = new_lat
            st.session_state.selected_lon = new_lon
            
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà..."):
                location_name = reverse_geocode(new_lat, new_lon)
                st.session_state.location_name = location_name
            
            latitude = new_lat
            longitude = new_lon
        
        if st.button("üîç ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"):
            m = folium.Map(location=[latitude, longitude], zoom_start=15)
            folium.Marker(
                [latitude, longitude],
                popup=f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏<br>{st.session_state.location_name}",
                tooltip="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                icon=folium.Icon(color='green', icon='check')
            ).add_to(m)
            st_folium(m, width=700, height=300)
        
        st.info(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {st.session_state.location_name}")
    
    elif location_method == "üìç ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô":
        if st.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô..."):
                current_lat, current_lon, current_location = get_user_location()
                st.session_state.selected_lat = current_lat
                st.session_state.selected_lon = current_lon
                st.session_state.location_name = current_location
                st.rerun()
        
        st.info(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {st.session_state.location_name}")
        st.info(f"‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {latitude:.6f}, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {longitude:.6f}")
        
        m = folium.Map(location=[latitude, longitude], zoom_start=12)
        folium.Marker(
            [latitude, longitude],
            popup=f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô<br>{st.session_state.location_name}",
            tooltip="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            icon=folium.Icon(color='blue', icon='home')
        ).add_to(m)
        st_folium(m, width=700, height=400)
    
    return latitude, longitude

def display_image_slider(images, caption=""):
    if not images:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        return
        
    if f"image_index_{caption}" not in st.session_state:
        st.session_state[f"image_index_{caption}"] = 0
    
    current_index = st.session_state[f"image_index_{caption}"]
    
    col1, col2, col3 = st.columns([1, 4, 1])
    
    with col1:
        if st.button("‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", key=f"prev_{caption}"):
            st.session_state[f"image_index_{caption}"] = (current_index - 1) % len(images)
            st.rerun()
    
    with col2:
        img = Image.open(images[current_index])
        st.image(img, caption=caption, use_container_width=True)
    
    with col3:
        if st.button("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è", key=f"next_{caption}"):
            st.session_state[f"image_index_{caption}"] = (current_index + 1) % len(images)
            st.rerun()
    
    st.write(f"‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà {current_index + 1} ‡∏à‡∏≤‡∏Å {len(images)}")

# --- New Function: Load Weather Rules from CSV ---
@st.cache_data
def load_weather_rules(file_path="weather_rules.csv"):
    try:
        rules_df = pd.read_csv(file_path)
        # Don't modify the column names - keep them as is in Thai
        return rules_df
    except FileNotFoundError:
        st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {file_path}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {str(e)}")
        return pd.DataFrame()

# --- New Function: Get Historical Weather Data ---
@st.cache_data(ttl=timedelta(hours=1))
def get_historical_weather(latitude, longitude, date_str, days_back=7):
    try:
        # Validate coordinates
        try:
            lat = float(latitude)
            lon = float(longitude)
            if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
                return None, "‡∏Ñ‡πà‡∏≤‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: -90 ‡∏ñ‡∏∂‡∏á 90, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: -180 ‡∏ñ‡∏∂‡∏á 180)"
        except ValueError:
            return None, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"

        # Validate date
        try:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
            today = datetime.now().date()
            if target_date > today:
                return None, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÑ‡∏î‡πâ"
            if target_date < today - timedelta(days=7):
                return None, "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô"
        except ValueError:
            return None, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"

        historical_data = {}
        days_to_fetch = min(days_back, (today - target_date).days + 1)

        for i in range(days_to_fetch):
            current_date = target_date - timedelta(days=i)
            date_param = current_date.strftime("%Y-%m-%d")
            
            # Skip future dates
            if current_date > today:
                continue

            params = {
                "key": WEATHER_API_KEY,
                "q": f"{lat},{lon}",
                "dt": date_param
            }
            
            try:
                response = requests.get(WEATHER_API_URL, params=params)
                response.raise_for_status()
                data = response.json()
                
                if "forecast" in data and "forecastday" in data["forecast"] and len(data["forecast"]["forecastday"]) > 0:
                    day_data = data["forecast"]["forecastday"][0]["day"]
                    historical_data[date_param] = {
                        "avgtemp_c": day_data.get("avgtemp_c"),
                        "totalprecip_mm": day_data.get("totalprecip_mm"),
                        "avghumidity": day_data.get("avghumidity")
                    }
                else:
                    return None, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_param}"
                    
            except requests.exceptions.RequestException as e:
                error_msg = str(e)
                if "Bad Request" in error_msg:
                    return None, "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"
                elif "Unauthorized" in error_msg:
                    return None, "API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"
                else:
                    return None, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Weather API: {error_msg}"

        if not historical_data:
            return None, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"

        return historical_data, None

    except Exception as e:
        return None, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}"

# --- New Function: Get Current Weather Data ---
def get_current_weather(latitude, longitude):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        # Validate coordinates
        try:
            lat = float(latitude)
            lon = float(longitude)
            if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
                return None, "‡∏Ñ‡πà‡∏≤‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        except ValueError:
            return None, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"

        params = {
            "key": WEATHER_API_KEY,
            "q": f"{lat},{lon}"
        }

        response = requests.get(WEATHER_CURRENT_API_URL, params=params)
        response.raise_for_status()
        data = response.json()

        if "current" in data:
            current_data = {
                "temp_c": data["current"].get("temp_c"),
                "humidity": data["current"].get("humidity"),
                "precip_mm": data["current"].get("precip_mm"),
                "condition": data["current"].get("condition", {}).get("text"),
                "wind_kph": data["current"].get("wind_kph"),
                "last_updated": data["current"].get("last_updated")
            }
            return current_data, None
        else:
            return None, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"

    except requests.exceptions.RequestException as e:
        error_msg = str(e)
        if "Bad Request" in error_msg:
            return None, "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"
        elif "Unauthorized" in error_msg:
            return None, "API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"
        else:
            return None, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Weather API: {error_msg}"
    except Exception as e:
        return None, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}"

# --- New Function: Evaluate Weather Rules ---
def evaluate_weather_rules(predicted_disease_key, weather_data_summary, rules_df):
    messages = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    missing_data = []
    if weather_data_summary.get('avg_temp_c') is None:
        missing_data.append("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥")
    if weather_data_summary.get('avg_humidity') is None:
        missing_data.append("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå")
    if weather_data_summary.get('total_precip_mm') is None:
        missing_data.append("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô")
    
    if missing_data:
        messages.append(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏à‡∏≤‡∏Å {', '.join(missing_data)} ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return messages
    
    # Filter rules for the predicted disease
    relevant_rules = rules_df[rules_df['‡πÇ‡∏£‡∏Ñ'].astype(str) == predicted_disease_key.upper()]
    
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    messages.append("### üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°")
    
    for index, row in relevant_rules.iterrows():
        param = str(row['‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏´‡∏•‡∏±‡∏Å']).strip()
        condition_str = str(row['‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°']).strip()
        note = str(row['‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞']).strip()

        is_match = False
        current_param_value = None

        # Map parameters to their values
        param_mapping = {
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå': 'avg_humidity',
            '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥': 'avg_temp_c',
            '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô': 'total_precip_mm',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô': 'avg_humidity',
            '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®': 'total_precip_mm'
        }

        if param in param_mapping:
            current_param_value = weather_data_summary.get(param_mapping[param])
            if current_param_value is None:
                continue

        try:
            clean_condition = condition_str.replace('¬∞C', '').replace('%', '').replace('‡∏°‡∏°.', '').replace('‡∏°‡∏°./‡∏ß‡∏±‡∏ô', '').strip()
            
            if '->' in clean_condition:
                low, high = map(float, clean_condition.split('->'))
                is_match = low <= current_param_value <= high
                condition_display = f"{low}¬∞C ‡∏ñ‡∏∂‡∏á {high}¬∞C" if param == '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥' else f"{low}% ‡∏ñ‡∏∂‡∏á {high}%" if param == '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå' else f"{low} ‡∏ñ‡∏∂‡∏á {high} ‡∏°‡∏°."
            
            elif '>=' in clean_condition:
                value = float(clean_condition.replace('>=', '').strip())
                is_match = current_param_value >= value
                condition_display = f"‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {value}" + ("¬∞C" if param == '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥' else "%" if param == '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå' else " ‡∏°‡∏°.")
            
            elif '<=' in clean_condition:
                value = float(clean_condition.replace('<=', '').strip())
                is_match = current_param_value <= value
                condition_display = f"‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {value}" + ("¬∞C" if param == '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥' else "%" if param == '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå' else " ‡∏°‡∏°.")
            
            elif condition_str == '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°':
                if param == '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥':
                    is_match = 25 <= current_param_value <= 32
                    condition_display = "25¬∞C ‡∏ñ‡∏∂‡∏á 32¬∞C"
                elif param == '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå':
                    is_match = 70 <= current_param_value <= 80
                    condition_display = "70% ‡∏ñ‡∏∂‡∏á 80%"
                elif param == '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô':
                    is_match = current_param_value >= 35
                    condition_display = "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 35 ‡∏°‡∏°."
            
            elif condition_str == '‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏á':
                is_match = current_param_value < 10
                condition_display = "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏°‡∏°."
            
            elif condition_str == '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏§‡∏î‡∏π‡∏ù‡∏ô':
                is_match = current_param_value > 20
                condition_display = "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏°‡∏°."

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            value_str = f"{current_param_value:.1f}"
            unit = "¬∞C" if param == '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥' else "%" if param == '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå' else "‡∏°‡∏°."
            
            if is_match:
                messages.append(f"‚ö†Ô∏è **{param}** ({value_str}{unit}) - {note}")
            else:
                messages.append(f"‚úÖ **{param}** ({value_str}{unit}) - ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ")

        except Exception as e:
            continue

    messages.append("---")
    if predicted_disease_key == 'HEALTHY':
        messages.append("### ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ: ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")
    else:
        found_risks = any("‚ö†Ô∏è" in msg for msg in messages)
        if found_risks:
            messages.append(f"### ‚ö†Ô∏è ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ {DISEASE_INFO[predicted_disease_key]['thai_name']}")
        else:
            messages.append(f"### ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ: ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ {DISEASE_INFO[predicted_disease_key]['thai_name']}")

    return messages

def get_risk_priority(risk_level):
    """Return priority number for risk level"""
    risk_priorities = {
        '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á': 3,
        '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': 2,
        '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥': 1,
        '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ': 0
    }
    return risk_priorities.get(risk_level, 0)

def main():
    load_css()
    
    st.markdown('<div class="farmer-emoji">üå±üë®‚Äçüåæüå±</div>', unsafe_allow_html=True)
    st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")
    st.markdown("### AI Image Classification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÑ‡∏ó‡∏¢")

    with st.sidebar:
        st.markdown("## üì± ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        st.markdown("""
        <div class="info-box">
            <ol>
                <li>üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á</li>
                <li>üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û </li>
                <li>üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û</li>
                <li>ü§ñ ‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</li>
                <li>üìä ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("### ‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        st.markdown("""
        <div class="status-warning">
            ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á ‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÜ
        </div>
        """, unsafe_allow_html=True)

    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI..."):
        model, device = load_model()

    if model is None:
        st.markdown("""
        <div class="status-error">
            ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        </div>
        """, unsafe_allow_html=True)
        return

    rules_df = load_weather_rules()
    if rules_df.empty:
        st.markdown("""
        <div class="status-warning">
            ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        </div>
        """, unsafe_allow_html=True)

    st.markdown("## üì∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")
    
    upload_option = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î:",
        ["üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", "üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á"]
    )

    uploaded_file = None
    if upload_option == "üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á":
        uploaded_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á",
            type=['jpg', 'jpeg', 'png'],
            help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, JPEG, PNG"
        )
    else:
        camera_image = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")
        if camera_image is not None:
            uploaded_file = camera_image

    latitude, longitude = location_input_section()
    # Make date input user-friendly with better validation
    today = datetime.now().date()
    min_date = today - timedelta(days=7)
    analysis_date = st.date_input(
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ 7 ‡∏ß‡∏±‡∏ô)", 
        value=today,
        max_value=today,
        min_value=min_date,
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)"
    )
    
    # Convert date to string for API call
    analysis_date_str = analysis_date.strftime("%Y-%m-%d")

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        # Fix image orientation before displaying
        image = fix_image_orientation(image)
        col1, col2 = st.columns([1, 1])

        with col1:
            st.markdown("### üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î")
            st.image(image)

        with col2:
            st.markdown("### üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            with st.spinner("ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                is_valid, confidence_score, entropy = validate_cassava_image(image, model)
                if not is_valid or (confidence_score is not None and confidence_score < 0.5):
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥")
                    st.warning("""
                        ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:
                        - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏£‡∏¥‡∏á
                        - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠
                        - ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö
                        """)
                    return
                probabilities = predict_disease(model, image, device)
                if probabilities is not None:
                    predicted_class = max(probabilities, key=probabilities.get)
                else:
                    predicted_class = None

            if predicted_class is not None:
                disease_info = DISEASE_INFO[predicted_class]
                confidence = probabilities[predicted_class] * 100
                if predicted_class == 'HEALTHY':
                    card_class = "disease-card healthy-card"
                elif disease_info['severity'] == '‡∏™‡∏π‡∏á':
                    card_class = "disease-card disease-severe"
                else:
                    card_class = "disease-card"
                st.markdown(f"""
                <div class="{card_class}">
                    <h3>{disease_info['thai_name']}</h3>
                    <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå:</strong> {disease_info['name']}</p>
                    <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô:</strong> {confidence:.1f}%</p>
                    <div class="confidence-bar">
                        <div class="confidence-fill" style="width: {confidence}%"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)

        st.markdown("## üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        if predicted_class is not None:
            disease_info = DISEASE_INFO[predicted_class]
            col1, col2 = st.columns([1, 1])
            with col1:
                st.markdown("### üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
                st.write(disease_info['description'])
                st.markdown("### üî¨ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£")
                st.write(disease_info['symptoms'])
            with col2:
                st.markdown("### üíä ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤/‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô")
                st.write(disease_info['treatment'])
                if disease_info['severity'] != '‡πÑ‡∏°‡πà‡∏°‡∏µ':
                    st.markdown(f"### ‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á: {disease_info['severity']}")
            
            # --- New: Weather Analysis Section ---
            st.markdown("---")
            st.markdown("## ‚òÅÔ∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πà‡∏ß‡∏°")
            if latitude and longitude and analysis_date_str:
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    current_weather, current_error = get_current_weather(latitude, longitude)
                    
                    if current_error:
                        st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_error}")
                    elif current_weather:
                        st.write("### üå§Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
                        st.write(f"*‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {current_weather['last_updated']}*")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        curr_col1, curr_col2, curr_col3 = st.columns(3)
                        with curr_col1:
                            st.metric("üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", f"{current_weather['temp_c']:.1f}¬∞C")
                        with curr_col2:
                            st.metric("üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå", f"{current_weather['humidity']}%")
                        with curr_col3:
                            st.metric("üåßÔ∏è ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô", f"{current_weather['precip_mm']:.1f}‡∏°‡∏°.")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                        extra_col1, extra_col2 = st.columns(2)
                        with extra_col1:
                            st.metric("üí® ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°", f"{current_weather['wind_kph']} ‡∏Å‡∏°./‡∏ä‡∏°.")
                        with extra_col2:
                            st.write("‚òÅÔ∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®:", current_weather['condition'])

                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
                    historical_weather, error_msg = get_historical_weather(latitude, longitude, analysis_date_str, days_back=7)

                    if error_msg:
                        st.error(f"‚ö†Ô∏è {error_msg}")
                    elif historical_weather:
                        st.write("### üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô")
                        
                        # Calculate average/total for the past 7 days for relevant parameters
                        temps = [d.get('avgtemp_c') for d in historical_weather.values() if d.get('avgtemp_c') is not None]
                        humidities = [d.get('avghumidity') for d in historical_weather.values() if d.get('avghumidity') is not None]
                        precipitations = [d.get('totalprecip_mm') for d in historical_weather.values() if d.get('totalprecip_mm') is not None]

                        if not temps or not humidities or not precipitations:
                            st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")

                        avg_temp_7_days = np.mean(temps) if temps else None
                        avg_humidity_7_days = np.mean(humidities) if humidities else None
                        total_precip_7_days = np.sum(precipitations) if precipitations else None

                        # Display weather data
                        st.write("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_temp_7_days:.1f}¬∞C" if avg_temp_7_days is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                        with col2:
                            st.metric("üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_humidity_7_days:.1f}%" if avg_humidity_7_days is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                        with col3:
                            st.metric("üåßÔ∏è ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô‡∏£‡∏ß‡∏°", f"{total_precip_7_days:.1f}‡∏°‡∏°." if total_precip_7_days is not None else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

                        # Prepare summary for rule evaluation
                        weather_data_summary = {
                            'avg_temp_c': avg_temp_7_days,
                            'avg_humidity': avg_humidity_7_days,
                            'total_precip_mm': total_precip_7_days,
                        }
                        
                        if not rules_df.empty and predicted_class is not None:
                            weather_messages = evaluate_weather_rules(predicted_class, weather_data_summary, rules_df)
                            for msg in weather_messages:
                                st.markdown(msg)
                        else:
                            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                    else:
                        st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î/‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î ‡πÅ‡∏•‡∏∞ WeatherAPI Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            else:
                st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
            # --- End Weather Analysis Section ---


        st.markdown("## üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ")
        if probabilities is not None:
            for disease_key, prob in probabilities.items():
                disease_name = DISEASE_INFO[disease_key]['thai_name']
                percentage = float(prob) * 100
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.write(f" {disease_name}")
                    st.progress(float(prob))  
                with col2:
                    st.write(f"{percentage:.1f}%")
    else:
        st.info("üì± ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        st.markdown("## üåø ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ")
        for i, info in DISEASE_INFO.items():
            with st.expander(f"{info['emoji']} {info['thai_name']} ({info['name']})"):
                st.write(f"**‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:** {info['description']}")
                st.write(f"**‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:** {info['symptoms']}")
                st.write(f"**‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤:** {info['treatment']}")
                if info['severity'] != '‡πÑ‡∏°‡πà‡∏°‡∏µ':
                    st.write(f"**‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á:** {info['severity']}")
                st.markdown("### üì∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
                display_image_slider(info['example_images'], f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ {info['thai_name']}")

    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 20px;">
        üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á <br>
        ‚ö†Ô∏è <em>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</em>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()